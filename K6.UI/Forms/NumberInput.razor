@* @using System.Linq.Expressions *@
@* *@
@* @using K6.UI.Helpers *@
@* @using K6.UI.Shared *@
@* *@
@* @using Microsoft.AspNetCore.Components.Forms *@
@* *@
@* @typeparam TNumber *@
@* *@
@* <label for="@Id" class="form-label">@Label</label> *@
@* <InputNumber id="@Id" name="@Name" type="@Type.ToHtml()" TValue="TNumber" bind-Value="InputValue" placeholder="@Placeholder" readonly="@ReadOnly" *@
@*              disabled="@Disabled" class="@Class"/> *@
@* <ValidationMessage For="@(() => Id)" class="invalid-feedback"/> *@
@* *@
@* @code { *@
@* *@
@*     /// <summary> *@
@*     /// Id of the input element. *@
@*     /// </summary> *@
@*     [Parameter] *@
@*     public string Id { get; set; } = NameHelper.Random(nameof(Input<T>)); *@
@* *@
@*     /// <summary> *@
@*     /// Name of the input element. *@
@*     /// </summary> *@
@*     [Parameter] *@
@*     public string Name *@
@*     { *@
@*         get => _name ?? Id; *@
@*         set => _name = value; *@
@*     } *@
@* *@
@*     /// <summary> *@
@*     /// Type of the input element. *@
@*     /// </summary> *@
@*     [Parameter] *@
@*     public InputType Type *@
@*     { *@
@*         get => _type ?? (IsText ? InputType.Text : IsNumber ? InputType.Number : IsDate ? InputType.Date : InputType.Text); *@
@*         set *@
@*         { *@
@*             if (IsText && value.IsText() || IsNumber && value.IsNumber() || IsDate && value.IsDate()) *@
@*             { *@
@*                 _type = value; *@
@*             } *@
@*         } *@
@*     } *@
@* *@
@*     /// <summary> *@
@*     ///  *@
@*     /// </summary> *@
@*     [Parameter] *@
@*     public Expression<Func<T>>? For { get; set; } *@
@* *@
@*     /// <summary> *@
@*     /// Label of the input element. *@
@*     /// </summary> *@
@*     [Parameter] *@
@*     public string Label { get; set; } *@
@* *@
@*     /// <summary> *@
@*     /// Placeholder of the input element. *@
@*     /// </summary> *@
@*     [Parameter] *@
@*     public string Placeholder { get; set; } *@
@* *@
@*     /// <summary> *@
@*     /// Value of the input element. *@
@*     /// </summary> *@
@*     [Parameter] *@
@*     public T Value { get; set; } *@
@* *@
@*     /// <summary> *@
@*     /// Value changed event of the input element. *@
@*     /// </summary> *@
@*     [Parameter] *@
@*     public EventCallback<T> ValueChanged { get; set; } *@
@* *@
@*     /// <summary> *@
@*     /// Size of the input element. *@
@*     /// </summary> *@
@*     [Parameter] *@
@*     public Size? Size { get; set; } *@
@* *@
@*     /// <summary> *@
@*     /// Columns of the textarea element. *@
@*     /// </summary> *@
@*     [Parameter] *@
@*     public int? Cols { get; set; } *@
@* *@
@*     /// <summary> *@
@*     /// Rows of the textarea element. *@
@*     /// </summary> *@
@*     [Parameter] *@
@*     public int? Rows { get; set; } = 5; *@
@* *@
@*     /// <summary> *@
@*     /// Disabled state of the input element. *@
@*     /// </summary> *@
@*     [Parameter] *@
@*     public bool Disabled { get; set; } *@
@* *@
@*     /// <summary> *@
@*     /// Read-only state of the input element. *@
@*     /// </summary> *@
@*     [Parameter] *@
@*     public bool ReadOnly { get; set; } *@
@* *@
@*     private static bool IsText => typeof(T) == typeof(string); *@
@*     private static bool IsNumber => typeof(T) == typeof(int) || typeof(T) == typeof(float) || typeof(T) == typeof(double) || typeof(T) == typeof(decimal) || typeof(T) == typeof(byte) || typeof(T) == typeof(sbyte) || typeof(T) == typeof(short) || typeof(T) == typeof(ushort) || typeof(T) == typeof(uint) || typeof(T) == typeof(long) || typeof(T) == typeof(ulong); *@
@*     private static bool IsDate => typeof(T) == typeof(DateTime) || typeof(T) == typeof(DateTimeOffset); *@
@* *@
@*     private string _name; *@
@*     private InputType? _type; *@
@* *@
@*     private T InputValue *@
@*     { *@
@*         get => Value; *@
@*         set *@
@*         { *@
@*             switch (EqualityComparer<T>.Default.Equals(value, Value)) *@
@*             { *@
@*                 case false: *@
@*                     Value = value; *@
@*                     ValueChanged.InvokeAsync(value); *@
@*                     break; *@
@*             } *@
@*         } *@
@*     } *@
@* *@
@*     private string Class => string.Join( *@
@*         ReadOnly ? "form-control-plaintext" : "form-control", *@
@*         Size.HasValue ? Size.Value.ToInputCssClass() : null *@
@*     ); *@
@* *@
@* } *@